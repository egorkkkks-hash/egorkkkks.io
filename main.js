const WebSocket = require('ws');
const { v4: uuidv4 } = require('uuid'); // npm install uuid

const wss = new WebSocket.Server({ port: 3000 });
const clients = new Map();

console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:3000");

wss.on('connection', function (ws) {
  const clientId = uuidv4();
  clients.set(ws, { id: clientId });

  console.log(`üë§ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${clientId}`);
  broadcastSystemMessage(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);

  ws.on('message', function (data) {
    try {
      const message = JSON.parse(data);
      // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (typeof message.name !== "string" || typeof message.message !== "string") return;

      const fullMessage = JSON.stringify({
        type: "chat",
        name: message.name,
        message: message.message,
        time: new Date().toISOString()
      });

      broadcast(fullMessage);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.message);
    }
  });

  ws.on('close', function () {
    clients.delete(ws);
    console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientId}`);
    broadcastSystemMessage(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
  });

  ws.on('error', function (err) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ ${clientId}:`, err.message);
  });
});

// –°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ (ping/pong)
setInterval(() => {
  for (let client of clients.keys()) {
    if (client.readyState === WebSocket.OPEN) {
      client.ping();
    }
  }
}, 30000);

// –†–∞—Å—Å—ã–ª–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function broadcast(message) {
  for (let client of clients.keys()) {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message);
    }
  }
}

// –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ)
function broadcastSystemMessage(msg) {
  const message = JSON.stringify({
    type: "system",
    message: msg,
    time: new Date().toISOString()
  });
  broadcast(message);
}
